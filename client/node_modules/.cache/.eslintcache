[{"C:\\Users\\sahar\\mern\\project\\client\\src\\index.js":"1","C:\\Users\\sahar\\mern\\project\\client\\src\\reportWebVitals.js":"2","C:\\Users\\sahar\\mern\\project\\client\\src\\App.js":"3","C:\\Users\\sahar\\mern\\project\\client\\src\\views\\Main.js":"4","C:\\Users\\sahar\\mern\\project\\client\\src\\components\\LandingPage.jsx":"5"},{"size":500,"mtime":1653086830806,"results":"6","hashOfConfig":"7"},{"size":362,"mtime":1653086719824,"results":"8","hashOfConfig":"7"},{"size":363,"mtime":1653608006708,"results":"9","hashOfConfig":"7"},{"size":642,"mtime":1653779757963,"results":"10","hashOfConfig":"7"},{"size":14014,"mtime":1653786963647,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},"16i0vdj",{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},"C:\\Users\\sahar\\mern\\project\\client\\src\\index.js",[],[],[],"C:\\Users\\sahar\\mern\\project\\client\\src\\reportWebVitals.js",[],[],"C:\\Users\\sahar\\mern\\project\\client\\src\\App.js",["30"],[],"import logo from './logo.svg';\r\nimport './App.css';\r\nimport {BrowserRouter, Route, Switch} from 'react-router-dom';\r\nimport Main from './views/Main';\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <BrowserRouter>\r\n      <Switch>\r\n        <Route exact path=\"/\">\r\n          <Main />\r\n        </Route>\r\n      </Switch>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\sahar\\mern\\project\\client\\src\\views\\Main.js",[],[],"C:\\Users\\sahar\\mern\\project\\client\\src\\components\\LandingPage.jsx",["31","32","33","34"],[],"import style from '../views/style.css';\r\nimport axios from 'axios';\r\nimport { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst LandingPage = (props) => {\r\n    const [currCat, setCurrCat] = useState(\"\");             //*CURRENT CATEGORY\r\n    const [catMeals, setCatMeals] = useState([]);           //*CURRENT CATEORY-MEALS\r\n    const [ready, setReady] = useState(false);              //*ONCE CATEGORY & MEALS ARE LOADED\r\n    const [meal, setMeal] = useState([]);                   //*CURRENT MEAL\r\n    const [currIngred, setCurrIngred] = useState([]);       //*CURRENT MEAL INGREDIENTS\r\n    const [currAmt, setCurrAmt] = useState([]);             //*CURRENT MEAL INGREDIENT MEASUREMENTS\r\n    const [finish, setFinish] = useState(false);            //*ONCE MEAL LOADS\r\n    const [sidebarOpen, setSideBarOpen] = useState(false);  //*OPENS SIDEBAR WITH MEAL INFO\r\n    const [search, setSearch] = useState(\"\");               //*HOLDS WHAT IS BEING TYPED IN SEARCH BAR\r\n    const [recipe, setRecipe] = useState(false);            //*OPENS FULL PAGE RECIPE WHEN SET TO TRUE. CLOSED OTHERWISE\r\n\r\n    //*METHODS\r\n    const currentCat = (value) => {\r\n        axios.get(`https://www.themealdb.com/api/json/v1/1/filter.php?c=${value}`)\r\n            .then(res=> {\r\n                setCurrCat(value)\r\n                setCatMeals(res.data.meals)\r\n                setReady(true);\r\n            })\r\n            .catch(err=>console.error(err))\r\n    }\r\n\r\n    const currMeal = (value) => {\r\n        axios.get(`https://www.themealdb.com/api/json/v1/1/lookup.php?i=${value}`)\r\n            .then(res=> {\r\n                setMeal(res.data.meals[0]);\r\n                let ingredients = []\r\n                for(let i=1; i<=20; i++){\r\n                    for(const [key, value] of Object.entries(res.data.meals[0])){\r\n                        let single = \"strIngredient\" + i;\r\n                        if(key === single){\r\n                            if(value !== '' && value !== null){\r\n                                ingredients.push(`${value}`)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                setCurrIngred(ingredients);\r\n                let measure = [];\r\n                for(let i=1; i<=20; i++){\r\n                    for(const [key, value] of Object.entries(res.data.meals[0])){\r\n                        let singleVal = \"strMeasure\" + i;\r\n                        if(key === singleVal){\r\n                            if(value !== '' && value !== null){\r\n                                measure.push(`${value}`)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                setCurrAmt(measure);\r\n                setFinish(true);\r\n                setSideBarOpen(true);\r\n            })\r\n            .catch(err=>console.error(err))\r\n    }\r\n\r\n    const randMeal = () => {\r\n        axios.get(`https://www.themealdb.com/api/json/v1/1/random.php`)\r\n            .then(res=> {\r\n                setMeal(res.data.meals[0])\r\n                setFinish(true);\r\n                setSideBarOpen(true);\r\n                let ingredients = []\r\n                for(let i=1; i<=20; i++){\r\n                    for(const [key, value] of Object.entries(res.data.meals[0])){\r\n                        let single = \"strIngredient\" + i;\r\n                        if(key === single){\r\n                            if(value !== '' && value !== null){\r\n                                ingredients.push(`${value}`)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                setCurrIngred(ingredients);\r\n                let measure = [];\r\n                for(let i=1; i<=20; i++){\r\n                    for(const [key, value] of Object.entries(res.data.meals[0])){\r\n                        let singleVal = \"strMeasure\" + i;\r\n                        if(key === singleVal){\r\n                            if(value !== '' && value !== null){\r\n                                measure.push(`${value}`)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                setCurrAmt(measure);\r\n            })\r\n            .catch(err=>console.error(err))\r\n    }\r\n\r\n    const handleViewSidebar = () => {\r\n        if(sidebarOpen === false){\r\n            setSideBarOpen(true);\r\n        }\r\n        if(sidebarOpen === true) {\r\n            setSideBarOpen(false);\r\n        }\r\n    };\r\n\r\n    const searchResult = (e) => {\r\n        e.preventDefault();\r\n        axios.get(`https://www.themealdb.com/api/json/v1/1/filter.php?i=${search}`)\r\n        .then(res=> {\r\n            setCurrCat(search);\r\n                setCatMeals(res.data.meals);\r\n                setReady(true);\r\n                setSearch(\"\");\r\n            })\r\n            .catch(err=>console.error(err))\r\n    }\r\n\r\n    const capitalizeFirstLetter = (string) => {\r\n        return string.charAt(0).toUpperCase() + string.slice(1);\r\n    }\r\n\r\n    const fullRecipe = () => {\r\n        setSideBarOpen(false);\r\n        setRecipe(true);\r\n    }\r\n\r\n    const backToMain = () => {\r\n        setRecipe(false);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"header flex sp-btw\">\r\n                <div className='hidden' id='hidden'>\r\n                </div>\r\n                <div>\r\n                    <h2 className=\"header-link\">Recipe Genie</h2>\r\n                </div>\r\n                <div className=\"padding-right-10\">\r\n                    <form onSubmit={searchResult}>\r\n                        <input type=\"text\" placeholder=\"Search by Main Ingredient\" id=\"search\" value={search} onChange={(e)=>setSearch(e.target.value)}/>\r\n                        <input type=\"submit\" value=\"Search\" id=\"button\"/>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n            {meal && finish && sidebarOpen ?\r\n            <div className=\"Sidebar body\" id='sidebar'>\r\n                <div className='flex right'>\r\n                    <button className=\"sidebar-icon sidebar-burger\" id='close-btn' onClick={handleViewSidebar}>X</button>\r\n                </div>\r\n                <div className=\"sidebar-header centered body\">\r\n                    <h1 className=\"sidebar-logo center body\">{meal.strMeal.toUpperCase()}</h1>\r\n                </div>\r\n                <div className='all-ingreds marg-left-10 marg-right-10 padding-left-10 padding-right-10'>\r\n                <div className=\"flex body just-cent padding-top-20\" id='block'>\r\n                    <div className=\"marg-right-20\" id='center'>\r\n                        <img src={meal.strMealThumb} id=\"recipepic\"/>\r\n                    </div>\r\n                    <div className=\"marg-left-20\">\r\n                        INGREDIENTS:\r\n                        <div className=\"flex ingreds\" id='ingreds'>\r\n                            <div>\r\n                            {currIngred.map((ingred, i)=>\r\n                                <div key={i}>\r\n                                    <li className=\"line-spc\">{capitalizeFirstLetter(ingred)}</li>\r\n                                </div>)}\r\n                            </div>\r\n                            <div className='marg-right-20'>\r\n                            {currAmt.map((amt, i)=>\r\n                                <div key={i}>\r\n                                    <span className=\"line-spc marg-left-10\">{amt}</span>\r\n                                </div>)}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"padding-left-10 padding-right-10 line-spc body\">\r\n                    <p>INSTRUCTIONS: <br />\r\n                    <span className='text'>{meal.strInstructions}</span></p>\r\n                </div>\r\n                </div>\r\n                <div className='center marg-top-10'>\r\n                    <Link onClick={fullRecipe} className='body full-rec-link' id=\"rec-title\">VIEW FULL RECIPE HERE</Link>\r\n                </div>\r\n            </div> : <></> }\r\n            <div className='colored'>\r\n            {recipe ?\r\n                <div className='page-width centered frosty'>\r\n                    <div className='full-recipe centered frosty'>\r\n                        <div className='flex just-cent cursive centered'>\r\n                            <div className='center'>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"body flex sp-btw\">\r\n                            <div className='hidden-2'>\r\n                            </div>\r\n                            <div>\r\n                                <h1 className=\"land-box-title center cursive big-marg-top\">{meal.strMeal}</h1>\r\n                            </div>\r\n                            <div className='right marg-right-10'>\r\n                                <button onClick={backToMain} className='dropbtn-2 big-marg-top' id='surprise'>Go Back</button>\r\n                            </div>\r\n                        </div>\r\n                        <div className='marg-left-10 marg-right-10 padding-left-10 padding-right-10'>\r\n                            <div className=\"flex body just-left marg-left-20 padding-left-10 padding-right-10\">\r\n                                <div>\r\n                                    <img src={meal.strMealThumb} id=\"mainrecipepic\"/>\r\n                                </div>\r\n                                <div className='marg-left-20 padding-left-10'>\r\n                                    <div>\r\n                                        <span id=\"med-text\">INGREDIENTS:</span>\r\n                                        <div className=\"flex full-ingred sp-btw\" id=\"small-text\">\r\n                                            <div>\r\n                                            {currIngred.map((ingred, i)=>\r\n                                                <div key={i}>\r\n                                                    <li className=\"line-spc\">{capitalizeFirstLetter(ingred)}</li>\r\n                                                </div>)}\r\n                                            </div>\r\n                                            <div>\r\n                                            {currAmt.map((amt, i)=>\r\n                                                <div key={i}>\r\n                                                    <span className=\"line-spc marg-left-10\">{amt}</span>\r\n                                                </div>)}\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"padding-left-10 padding-right-10 line-spc body marg-left-20 marg-right-20 move-up padding-bottom-10 marg-bottom-10\">\r\n                                <p id=\"med-text\">INSTRUCTIONS: <br />\r\n                                <span id=\"small-text\">{meal.strInstructions}</span></p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <br />\r\n                </div>:\r\n                <div className='page-width centered frosty'>\r\n                    <div className='flex just-cent cursive centered'>\r\n                        <div className='center'>\r\n                        </div>\r\n                    </div>\r\n                    <div className='padding rand-box body center marg-top-20'>\r\n                        <h3 className='land-box-title-2 cursive marg-bottom-10'>Let us pick a meal for you!</h3>\r\n                        <button className='body dropbtn marg-bottom-20' id='surprise' onClick={randMeal}>SURPRISE ME!</button>\r\n                    </div>\r\n                    <hr className='divider'/>\r\n                    <h3 className='land-box-title cursive center'>Browse by Category:</h3>\r\n                    <div className='flex carousel frosty'>\r\n                    {props.categories.map((cat, i)=>\r\n                        <div key={i} className=\"center marg-bottom-10 categories\">\r\n                            <Link onClick={(e)=>{currentCat(cat.strCategory)}} className=\"rec-link\">\r\n                                <img src={cat.strCategoryThumb} alt=\"category\" id=\"catpic\"/>\r\n                                <span className='body' id=\"rec-title\">{cat.strCategory.toUpperCase()}</span>\r\n                            </Link>\r\n                        </div>\r\n                    )}\r\n                    <br />\r\n                    </div>\r\n                    <hr className='divider'/>\r\n                    <div className='marg-top-20'>\r\n                    {currCat ?\r\n                        <h2 className=\"center cat-title padding-bottom-20 cursive\">{capitalizeFirstLetter(currCat)}</h2>\r\n                        : <h2 className=\"center cat-title padding-bottom-20 cursive\">Recipes</h2>}\r\n                        <div className=\"flex recipes centered frosty\">\r\n                        {ready && catMeals ?\r\n                        catMeals.map((rec, i) => {\r\n                            return <div key={i} className=\"scroll\">\r\n                                <div className=\"center\">\r\n                                    <img src={rec.strMealThumb} id=\"subpic\"/>\r\n                                </div>\r\n                                <div className=\"recipe-title center\">\r\n                                    <Link className=\"rec-link\" id=\"rec-title\" onClick={(e)=>{currMeal(rec.idMeal)}}>\r\n                                        {rec.strMeal.toUpperCase()}\r\n                                    </Link>\r\n                                </div>\r\n                            </div> }) :\r\n                            <div className='centered holder'>CLICK ON A CATEGORY</div> }\r\n                        </div>\r\n                    </div>\r\n                    <br />\r\n                    <br />\r\n                    <br />\r\n                </div> }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default LandingPage;",{"ruleId":"35","severity":1,"message":"36","line":1,"column":8,"nodeType":"37","messageId":"38","endLine":1,"endColumn":12},{"ruleId":"35","severity":1,"message":"39","line":1,"column":8,"nodeType":"37","messageId":"38","endLine":1,"endColumn":13},{"ruleId":"40","severity":1,"message":"41","line":157,"column":25,"nodeType":"42","endLine":157,"endColumn":70},{"ruleId":"40","severity":1,"message":"41","line":207,"column":37,"nodeType":"42","endLine":207,"endColumn":86},{"ruleId":"40","severity":1,"message":"41","line":269,"column":37,"nodeType":"42","endLine":269,"endColumn":78},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'style' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement"]